"
   Licensed under the Squeak License (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.squeak.org/SqueakLicense/
"!
'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 1 February 2007 at 2:22:51 pm'!!Object methodsFor: 'system primitives' stamp: 'eem 2/1/2007 14:17'!instVarNamed: aString	"Return the value of the instance variable in me with that name.  Slow and unclean, but very useful. "	^ self instVarAt: (self class instVarIndexFor: aString asString)! !!Object methodsFor: 'system primitives' stamp: 'eem 2/1/2007 14:18'!instVarNamed: aString put: aValue	"Store into the value of the instance variable in me of that name.  Slow and unclean, but very useful. "	^ self instVarAt: (self class instVarIndexFor: aString asString) put: aValue! !!Object methodsFor: '*sixx-initializing' stamp: 'eem 2/1/2007 14:19'!sixxInstVarNamed: instVarName put: aValue 	"override if you like"	self		instVarAt: (self class instVarIndexFor: instVarName asString)		put: aValue! !!Behavior methodsFor: 'testing method dictionary' stamp: 'eem 2/1/2007 14:14'!whichSelectorsAccess: instVarName 	"Answer a set of selectors whose methods access the argument, 	instVarName, as a named instance variable."	| instVarIndex |	instVarIndex := self instVarIndexFor: instVarName ifAbsent: [^IdentitySet new].	^ self methodDict keys select: 		[:sel | 		((self methodDict at: sel)			readsField: instVarIndex)			or: [(self methodDict at: sel) writesField: instVarIndex]]	"Point whichSelectorsAccess: 'x'."! !!Behavior methodsFor: 'testing method dictionary' stamp: 'eem 2/1/2007 14:15'!whichSelectorsStoreInto: instVarName 	"Answer a Set of selectors whose methods access the argument, 	instVarName, as a named instance variable."	| instVarIndex |	instVarIndex := self instVarIndexFor: instVarName ifAbsent: [^IdentitySet new].	^ self methodDict keys select: 		[:sel | (self methodDict at: sel) writesField: instVarIndex]	"Point whichSelectorsStoreInto: 'x'."! !!ClassDescription methodsFor: 'instance variables'!instVarIndexFor: instVarName	"Answer the index of the named instance variable."	| index |	index := instanceVariables == nil 		ifTrue: [0]		ifFalse: [instanceVariables indexOf: instVarName].	index == 0 ifTrue: 		[^superclass == nil 			ifTrue: [0]			ifFalse: [superclass instVarIndexFor: instVarName]].	^superclass == nil 			ifTrue: [index]		ifFalse: [index + superclass instSize]! !!ClassDescription methodsFor: 'instance variables' stamp: 'eem 2/1/2007 14:14'!instVarIndexFor: instVarName ifAbsent: aBlock	"Answer the index of the named instance variable."	| index |	index := instanceVariables == nil 		ifTrue: [0]		ifFalse: [instanceVariables indexOf: instVarName].	index == 0 ifTrue: 		[^superclass == nil 			ifTrue: [aBlock value]			ifFalse: [superclass instVarIndexFor: instVarName ifAbsent: aBlock]].	^superclass == nil 			ifTrue: [index]		ifFalse: [index + superclass instSize]! !!ClassDescription methodsFor: 'instance variables'!instVarNameForIndex: index	"Answer the named instance variable with index index or nil if none."	| superInstSize |	index > self instSize ifTrue: [^nil].	superInstSize := superclass isNil ifTrue: [0] ifFalse: [superclass instSize].	index > superInstSize ifTrue:		[^instanceVariables at: index - superInstSize].	superclass isNil ifTrue: [^nil].	^superclass instVarNameForIndex: index	"(Object allSubclasses select:		[:cls| cls instSize > cls superclass instSize and: [cls subclasses isEmpty and: [cls superclass instSize > 0]]]) collect:			[:cls| (1 to: cls instSize) collect: [:i| cls instVarNameForIndex: i]]"! !