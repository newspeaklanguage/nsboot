"
   Licensed under the Squeak License (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.squeak.org/SqueakLicense/
"!
'From test of 19 May 2008 [latest update: #0] on 19 May 2008 at 9:25:35 am'!!Preferences class methodsFor: 'fonts' stamp: 'ahe 5/17/2008 21:44'!setListFontTo: aFont	"Set the list font as indicated"	Parameters at: #standardListFont put: aFont.	ListParagraph initialize! !!Preferences class methodsFor: 'fonts' stamp: 'ahe 5/17/2008 21:44'!setWindowTitleFontTo: aFont	"Set the window-title font to be as indicated"	Parameters at: #windowTitleFont put: aFont.	StandardSystemView setLabelStyle! !!RealEstateAgent class methodsFor: 'framing' stamp: 'Ahe 5/16/2008 19:26'!strictlyStaggeredInitialFrameFor: aStandardSystemView initialExtent: initialExtent world: aWorld	"This method implements a staggered window placement policy that I (di) like.	Basically it provides for up to 4 windows, staggered from each of the 4 corners.	The windows are staggered so that there will always be a corner visible."	| allowedArea grid initialFrame otherFrames cornerSel corner delta putativeCorner free maxLevel |	allowedArea :=(self maximumUsableAreaInWorld: aWorld)		insetBy: (self scrollBarSetback @ self screenTopSetback extent: 0@0).	"Number to be staggered at each corner (less on small screens)"	maxLevel := allowedArea area > 300000 ifTrue: [3] ifFalse: [2].	"Amount by which to stagger (less on small screens)"	grid := allowedArea area > 500000 ifTrue: [40] ifFalse: [20].	initialFrame := 0@0 extent: ((initialExtent							"min: (allowedArea extent - (grid*(maxLevel+1*2) + (grid//2))))							min: 600@400")).	otherFrames := Smalltalk isMorphic		ifTrue: [(SystemWindow windowsIn: aWorld satisfying: [:w | w isCollapsed not])					collect: [:w | w bounds]]		ifFalse: [ScheduledControllers scheduledWindowControllers				select: [:aController | aController view ~~ nil]				thenCollect: [:aController | aController view isCollapsed								ifTrue: [aController view expandedFrame]								ifFalse: [aController view displayBox]]].	0 to: maxLevel do:		[:level | 		1 to: 4 do:			[:ci | cornerSel := #(topLeft topRight bottomRight bottomLeft) at: ci.			corner := allowedArea perform: cornerSel.			"The extra grid//2 in delta helps to keep title tabs distinct"			delta := (maxLevel-level*grid+(grid//2)) @ (level*grid).			1 to: ci-1 do: [:i | delta := delta rotateBy: #right centerAt: 0@0]. "slow way"			putativeCorner := corner + delta.			free := true.			otherFrames do:				[:w |				free := free & ((w perform: cornerSel) ~= putativeCorner)].			free ifTrue:				[^ (initialFrame align: (initialFrame perform: cornerSel)								with: putativeCorner)						 translatedAndSquishedToBeWithin: allowedArea]]].	"If all else fails..."	^ (self scrollBarSetback @ self screenTopSetback extent: initialFrame extent)		translatedAndSquishedToBeWithin: allowedArea! !!RealEstateAgent class methodsFor: 'utilities' stamp: 'Ahe 5/16/2008 19:25'!assignCollapseFrameFor: aSSView 	"Offer up a location along the left edge of the screen for a collapsed SSView. Make sure it doesn't overlap any other collapsed frames."	| grid otherFrames topLeft viewBox collapsedFrame extent newFrame verticalBorderDistance top |	grid := 8.	verticalBorderDistance := 8.	aSSView isMorph		ifTrue: [otherFrames := (SystemWindow windowsIn: aSSView world satisfying: [:w | w ~= aSSView])						collect: [:w | w collapsedFrame]						thenSelect: [:rect | rect notNil].				viewBox := aSSView world viewBox copy]		ifFalse: [otherFrames := ScheduledControllers scheduledWindowControllers						collect: [:aController | aController view ~= aSSView ifTrue: [aController view collapsedFrame]]						thenSelect: [:rect | rect notNil].				viewBox := Display boundingBox].	collapsedFrame := aSSView collapsedFrame.	extent := collapsedFrame notNil				ifTrue: [collapsedFrame extent]				ifFalse: [aSSView isMorph					ifTrue: [aSSView getRawLabel width + aSSView labelWidgetAllowance @ (aSSView labelHeight + 2)]					ifFalse: [(aSSView labelText extent x + 70) @ aSSView labelHeight							min: aSSView labelDisplayBox extent]].	collapsedFrame notNil		ifTrue: [(otherFrames anySatisfy: [:f | collapsedFrame intersects: f])				ifFalse: ["non overlapping"					^ collapsedFrame]].	top := viewBox top + verticalBorderDistance.	[topLeft := viewBox left @ top.	newFrame := topLeft extent: extent.	newFrame bottom <= (viewBox height - verticalBorderDistance)]		whileTrue: 			[(otherFrames anySatisfy: [:w | newFrame intersects: w])				ifFalse: ["no overlap"					^ newFrame].			top := top + grid].	"If all else fails... (really to many wins here)"	^ 0 @ 0 extent: extent! !!RealEstateAgent class methodsFor: 'utilities' stamp: 'Ahe 5/16/2008 19:25'!assignCollapsePointFor: aSSView	"Offer up a location along the left edge of the screen for a collapsed SSView.	Make sure it doesn't overlap any other collapsed frames."	| grid otherFrames y free topLeft viewBox |	grid := 24.  "should be mult of 8, since manual move is gridded by 8"	aSSView isMorph		ifTrue: [otherFrames := (SystemWindow windowsIn: aSSView world satisfying: [:w | true])					collect: [:w | w collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox := aSSView world viewBox copy]		ifFalse: [otherFrames := ScheduledControllers scheduledWindowControllers					collect: [:aController | aController view collapsedFrame]					thenSelect: [:rect | rect notNil].				viewBox := Display boundingBox].	y := viewBox top.	[(y := y + grid) <= (viewBox height - grid)]		whileTrue:		[topLeft := viewBox left@y.		free := true.		otherFrames do: [:w | free := free & (topLeft ~= w topLeft)].		free ifTrue: [^ topLeft]].	"If all else fails..."	^ 0 @ 0! !!Preferences class methodsFor: 'personalization' stamp: 'Ahe 5/16/2008 19:22'!personalizeUserMenu: aMenu	"The user has clicked on the morphic desktop with the yellow mouse button (option+click on the Mac); a menu is being constructed to present to the user in response; its default target is the current world.  In this method, you are invited to add items to the menu as per personal preferences.	The default implementation, for illustrative purposes, sets the menu title to 'personal', and adds items for go-to-previous-project, show/hide flaps, and load code updates"		aMenu addTitle: 'personal' translated.  "Remove or modify this as per personal choice"	aMenu addStayUpItem.	aMenu add: 'previous project' translated action: #goBack.	aMenu add: 'load latest code updates' translated target: Utilities action: #updateFromServer.	aMenu add: 'about this system...' translated target: SmalltalkImage current action: #aboutThisSystem.! !!ProjectLauncher methodsFor: 'running' stamp: 'Ahe 5/16/2008 19:20'!startUpAfterLogin	| scriptName loader isUrl |	Preferences readDocumentAtStartup ifTrue: [		HTTPClient isRunningInBrowser ifTrue:[			self setupFromParameters.			scriptName := self parameterAt: 'src'.			CodeLoader defaultBaseURL: (self parameterAt: 'Base').		] ifFalse:[			scriptName := (SmalltalkImage current getSystemAttribute: 2) ifNil:[''].			scriptName := scriptName convertFromSystemString.			scriptName isEmpty ifFalse:[				"figure out if script name is a URL by itself"				isUrl := (scriptName asLowercase beginsWith:'http://') or:[						(scriptName asLowercase beginsWith:'file://') or:[						(scriptName asLowercase beginsWith:'ftp://')]].				isUrl ifFalse:[scriptName := 'file:',scriptName]].		]. ]	ifFalse: [ scriptName := '' ].	scriptName isEmptyOrNil		ifTrue:[^self].	loader := CodeLoader new.	loader loadSourceFiles: (Array with: scriptName).	(scriptName asLowercase endsWith: '.pr') 		ifTrue:[self installProjectFrom: loader]		ifFalse:[loader installSourceFiles].! !!Preferences class methodsFor: 'fonts' stamp: 'Ahe 5/18/2008 05:55'!setSystemFontTo: aFont	"Establish the default text font and style"	| aStyle newDefaultStyle |	aFont ifNil: [^ self].	aStyle := aFont textStyle ifNil: [^ self].	newDefaultStyle := aStyle copy.	newDefaultStyle defaultFontIndex: (aStyle fontIndexOf: aFont).	TextConstants at: #DefaultTextStyle put: newDefaultStyle! !Preferences expungeParameter: #PersonalDictionaryOfPreferences!#(automaticFlapLayout navigatorOnLeftEdge classicNavigatorEnabled) do: [:ea | Preferences removePreference: ea]!RealEstateAgent class removeSelector: #reduceByFlaps:!ProjectLauncher removeSelector: #setupFlaps!Project removeSelector: #flapsSuppressed!Project removeSelector: #flapsSuppressed:!Project removeSelector: #navigatorFlapVisible!Project removeSelector: #toggleFlapsSuppressed!Preferences class removeSelector: #automaticFlapLayoutString!Preferences removePreference: #showSharedFlaps!