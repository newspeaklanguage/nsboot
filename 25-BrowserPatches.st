"
   Licensed under the Squeak License (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.squeak.org/SqueakLicense/
"!
'From nsboot-2008-05-14.01 of 14 May 2008 [latest update: #0] on 15 May 2008 at 4:04:35 pm'!!CompiledMethod methodsFor: 'testing' stamp: 'eem 10/22/2007 15:24'!isAssignField	"Answer whether the receiver is an assign of an instance variable."	^self endPC - self initialPC + 1 <= 4	 and: [(self at: self initialPC) = 16r10 "pushTemp: 0"	 and: [(((self at: self initialPC + 1) between: 96 and: 111)			or: [(self at: self initialPC + 1) = 130])	 and: [(self at: self endPC) = 16r78 "return self"			or: [(self at: self endPC) = 16r7C "returnTop"]]]]! !!ParagraphEditor methodsFor: 'menu messages' stamp: 'GB 11/8/2007 15:14'!prettyPrint: decorated	"Reformat the contents of the receiver's view (a Browser)."	| selectedClass newText |	model selectedMessageCategoryName ifNil: [^ view flash].	selectedClass := model selectedClassOrMetaClass.	newText := selectedClass prettyPrinterClass new		format: self text		in: selectedClass		notifying: self		decorated: decorated.	newText ifNotNil:		[self deselect; selectInvisiblyFrom: 1 to: paragraph text size.		self replaceSelectionWith: (newText asText makeSelectorBoldIn: selectedClass).		self selectAt: 1]! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'GB 11/8/2007 15:16'!testFormatter	"Smalltalk testFormatter"	"Reformats the source for every method in the system, and	then compiles that source and verifies that it generates	identical code. The formatting used will be either classic	monochrome or fancy polychrome, depending on the setting	of the preference #colorWhenPrettyPrinting."	| newCodeString methodNode oldMethod newMethod badOnes n |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: 			[:bar | 			n := 0.			self systemNavigation allBehaviorsDo: 					[:cls | 					"Transcript cr; show: cls name."					cls selectors do: 							[:selector | 							(n := n + 1) \\ 100 = 0 ifTrue: [bar value: n].							newCodeString := cls prettyPrinterClass new										format: (cls sourceCodeAt: selector)										in: cls										notifying: nil										decorated: Preferences colorWhenPrettyPrinting.							methodNode := cls compilerClass new 										compile: newCodeString										in: cls										notifying: nil										ifFail: [].							newMethod := methodNode generate: #(0 0 0 0).							oldMethod := cls compiledMethodAt: selector.							oldMethod = newMethod 								ifFalse: 									[Transcript										cr;										show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection		name: 'Formatter Discrepancies'! !!SystemDictionary methodsFor: 'housekeeping' stamp: 'GB 11/8/2007 15:16'!testFormatter2	"Smalltalk testFormatter2"	"Reformats the source for every method in the system, and	then verifies that the order of source tokens is unchanged.	The formatting used will be either classic monochrome or	fancy polychrome, depending on the setting of the preference	#colorWhenPrettyPrinting. "	| newCodeString badOnes n oldCodeString oldTokens newTokens |	badOnes := OrderedCollection new.	self forgetDoIts.	'Formatting all classes...' 		displayProgressAt: Sensor cursorPoint		from: 0		to: CompiledMethod instanceCount		during: 			[:bar | 			n := 0.			self systemNavigation allBehaviorsDo: 					[:cls | 					"Transcript cr; show: cls name."					cls selectors do: 							[:selector | 							(n := n + 1) \\ 100 = 0 ifTrue: [bar value: n].							oldCodeString := (cls sourceCodeAt: selector) asString.							newCodeString := cls prettyPrinterClass new										format: oldCodeString										in: cls										notifying: nil										decorated: Preferences colorWhenPrettyPrinting.							oldTokens := oldCodeString findTokens: Character separators.							newTokens := newCodeString findTokens: Character separators.							oldTokens = newTokens 								ifFalse: 									[Transcript										cr;										show: '***' , cls name , ' ' , selector.									badOnes add: cls name , ' ' , selector]]]].	self systemNavigation browseMessageList: badOnes asSortedCollection		name: 'Formatter Discrepancies'! !!ParagraphEditor methodsFor: 'parenblinking' stamp: 'Ahe 5/15/2008 14:35'!clearParens	lastParentLocation ifNotNil:		[self text string size >= lastParentLocation ifTrue: [			self text				removeAttribute: TextColor cyan				from: lastParentLocation				to: lastParentLocation]]! !