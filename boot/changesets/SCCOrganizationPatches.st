"
   Licensed under the Squeak License (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.squeak.org/SqueakLicense/
"!
'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 18 May 2008 at 5:38:21 pm'!!ChangeRecord methodsFor: 'access' stamp: 'eem 8/7/2007 11:20'!organizationClass 	| organizationClass |	type == #reorganize ifFalse: [^ nil].	(Smalltalk includesKey: class asSymbol) ifFalse: [^ nil].	organizationClass := Smalltalk at: class asSymbol.	^meta ifTrue: [organizationClass class]		ifFalse: [organizationClass]! !!ChangeRecord methodsFor: 'initialization' stamp: 'eem 8/7/2007 11:13'!file: f position: p type: t class: c meta: m	self file: f position: p type: t.	class := c.	meta := m! !!ChangeRecord methodsFor: 'initialization' stamp: 'eem 8/7/2007 11:29'!fileIn	"File the receiver in.  If I represent a method or a class-comment, file the method in and	 make a note of it in the recent-submissions list; if I represent a do-it, then, well, do it.	 If I represdent a reorganization then apply it."	| methodClass s aSelector organizationClass |	Cursor read showWhile:		[(methodClass := self methodClass) notNil ifTrue:			[methodClass compile: self text classified: category withStamp: stamp notifying: nil.			(aSelector := self methodSelector) ifNotNil:				[Utilities noteMethodSubmission: aSelector forClass: methodClass]].		(type == #doIt) ifTrue:			[((s := self string) beginsWith: '----') ifFalse: [Compiler evaluate: s]].		(type == #classComment) ifTrue:			[ | cls | (cls := Smalltalk at: class asSymbol) comment: self text stamp: stamp.			Utilities noteMethodSubmission: #Comment forClass: cls ].		(organizationClass := self organizationClass) notNil ifTrue:			[organizationClass organization changeFromString: self text]]! !!ChangeSet class methodsFor: 'scanning' stamp: 'eem 8/7/2007 11:16'!scanCategory: file	"Scan anything that involves more than one chunk; method name is historical only"	| itemPosition item tokens organizationPosition stamp isComment anIndex |	itemPosition := file position.	item := file nextChunk.	(item endsWith: ' reorganize') ifTrue:		[tokens := Scanner new scanTokens: item.		 organizationPosition := file position.		 file nextChunk.		 ^{ChangeRecord new					file: file					position: organizationPosition					type: #reorganize					class: tokens first					meta: (tokens second == #class)}].	isComment := (item includesSubString: 'commentStamp:').	(isComment or: [item includesSubString: 'methodsFor:']) ifFalse:		["Maybe a preamble, but not one we recognize; bail out with the preamble trick"		^{(ChangeRecord new file: file position: itemPosition type: #preamble)}].	tokens := Scanner new scanTokens: item.	tokens size >= 3 ifTrue:		[stamp := ''.		anIndex := tokens indexOf: #stamp: ifAbsent: [nil].		anIndex ifNotNil: [stamp := tokens at: (anIndex + 1)].		tokens second == #methodsFor:			ifTrue: [^ self scanFile: file category: tokens third class: tokens first							meta: false stamp: stamp].		tokens third == #methodsFor:			ifTrue: [^ self scanFile: file category: tokens fourth class: tokens first							meta: true stamp: stamp]].		tokens second == #commentStamp:			ifTrue:				[stamp := tokens third.				item := (ChangeRecord new file: file position: file position type: #classComment										class: tokens first category: nil meta: false stamp: stamp).				file nextChunk.				file skipStyleChunk.				^Array with: item].	^#()! !!Compiler class methodsFor: 'file utilities' stamp: 'eem 1/23/2007 17:38'!extension	^self == Compiler		ifTrue: ['st']		ifFalse: [self subclassResponsibility]! !!FilePackage methodsFor: 'change record types' stamp: 'eem 8/7/2007 13:56'!reorganize: chgRec	doIts add: chgRec! !