"
   Licensed under the Squeak License (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.squeak.org/SqueakLicense/
"!
'From Squeak3.9 of 7 November 2006 [latest update: #7067] on 10 September 2007 at 9:21:55 pm'!"Change Set:		CastraitsDate:			10 September 2007Author:			AheThis change set will disable Traits by unregistering the Trait subsystem from the SystemChangeNotifier as well as nulling out Class instance variable traitComposition"!Smalltalk renameClassNamed: #NeuterTraits as: #Castraits!Object subclass: #Castraits	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Castraits'!!Castraits class methodsFor: 'accessing' stamp: 'Ahe 9/10/2007 21:15'!allReferencesToPackage: pkgName	| pkgCategories pkgClasses nav |		pkgCategories := SystemOrganization categoriesMatching: pkgName, '*'.	pkgClasses := (pkgCategories collect: [ :n | SystemOrganization listAtCategoryNamed: n ])		inject: IdentitySet new		into: [ :a :b | a, b].	nav := SystemNavigation default.	^(pkgClasses collect:		[ :sym |		Smalltalk at: sym ifPresent:			[:cls |			((nav allCallsOn: (cls environment associationAt: cls name)),			(nav allCallsOn: cls theNonMetaClass)) reject: [ :mr | pkgClasses includes: mr classSymbol ]]]) inject: OrderedCollection new into: [:a :b | a, b]! !!Castraits class methodsFor: 'accessing' stamp: 'Ahe 9/10/2007 21:20'!browseAllReferenceToPackage: pkgName	SystemNavigation default		browseMessageList: (self allReferencesToPackage: pkgName) asSortedCollection		name: 'Users of Traits package'! !!Castraits class methodsFor: 'accessing' stamp: 'Ahe 9/10/2007 20:12'!neuterAll	| allTraitUsers |	"Disable all notifications to Trait sub-system"	{ 'RequiredSelectors'. 'LocalSends'. 'ProvidedSelectors' } do:		[ :each |			Smalltalk at: each asSymbol ifPresent:				[ :cls |				cls allInstances do:					[ :inst |					Transcript cr; show: 'Neutering '; show: inst.					SystemChangeNotifier uniqueInstance noMoreNotificationsFor: inst ]]].	"Null out all empty TraitCompositions"	Behavior allSubInstances, TraitBehavior allSubInstances		select:			[ :clsOrTrait | | tc |			tc := clsOrTrait instVarNamed: 'traitComposition'.			tc ~= nil and: [tc isEmpty ] ]		thenDo:			[ :clsOrTrait | clsOrTrait instVarNamed: 'traitComposition' put: nil ].	"Attempt to fix corrupt IdentitySet in traits and their classTraits"	(Smalltalk allTraits collect: [ :t | t classTrait ]), Smalltalk allTraits do:		[ :t | | users |		users := IdentitySet new.		users addAll: t users.		t instVarNamed: 'users' put: users ].		"Find all Behaviors which have a traitComposition"	allTraitUsers := Behavior allSubInstances, TraitBehavior allSubInstances select:		[ :clsOrTrait | | tc |		tc := clsOrTrait instVarNamed: 'traitComposition'.		tc ~= nil ].	"Remove the traitComposition effectively copying the methods from the trait to the user"	allTraitUsers do:		[ :cls | | locals |		cls traitComposition traits do: [ :t | t removeUser: cls ].		cls instVarNamed: 'traitComposition' put: nil.		locals := cls instVarNamed: 'localSelectors'.		locals = nil ifTrue: [ locals := cls selectors ].		cls selectors			removeAllFoundIn: locals;			do:				[ :sel |				"Recompile to ensure the CompiledMethod does not hold a reference to the trait from where it originated"				cls recompile: sel from: cls.				"Allow Monticello (and others) to realize that something has changed"				SystemChangeNotifier uniqueInstance					methodAdded: (cls compiledMethodAt: sel)					selector: sel					inProtocol: (cls organization categoryOfElement: sel)					class: cls ].		cls instVarNamed: 'localSelectors' put: nil ].	allTraitUsers := nil.		"Finally ensure we left no obsolete classes"	SmalltalkImage current fixObsoleteReferences! !"Postscript:Disable traits"Castraits neuterAll!