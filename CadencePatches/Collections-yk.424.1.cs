'From nsboot-2011-08-03 of 3 August 2011 [latest update: #10966] on 12 June 2012 at 9:30:12 pm'!!Array methodsFor: 'testing' stamp: 'eem 11/2/2011 11:02'!shouldBePrintedAsLiteral	^self class == Array	  and: [self shouldBePrintedAsLiteralVisiting: (IdentitySet new: 8)]! !!Array methodsFor: 'testing' stamp: 'eem 11/2/2011 11:01'!shouldBePrintedAsLiteralVisiting: aSet	self class == Array ifFalse:		[^false].	(aSet includes: self) ifTrue:		[^false].	aSet add: self.	^self allSatisfy: [:each | each shouldBePrintedAsLiteralVisiting: aSet]! !!Character methodsFor: 'testing' stamp: 'nice 7/14/2011 22:21'!shouldBePrintedAsLiteral	^(value between: 33 and: 255) and: [value ~= 127]! !!Character methodsFor: 'testing' stamp: 'eem 11/2/2011 11:03'!shouldBePrintedAsLiteralVisiting: aSet	^self shouldBePrintedAsLiteral! !!LookupKey methodsFor: 'bindings' stamp: 'ar 3/5/2010 20:24'!beBindingOfType: aClass announcing: aBool	"Make the receiver a global binding of the given type"	| old new |	(Smalltalk globals associationAt: self key) == self		ifFalse:[^self error:'Not a global variable binding'].	self class == aClass ifTrue:[^self].	old := self.	new := aClass key: self key value: self value.	old become: new.	"NOTE: Now self == read-only (e.g., the new binding)"	^self recompileBindingsAnnouncing: aBool! !!String methodsFor: 'accessing' stamp: 'eem 9/29/2011 12:40'!numArgs 	"Answer either the number of arguments that the receiver would take if considered a selector.  Answer -1 if it couldn't be a selector.  Note that currently this will answer -1 for anything begining with an uppercase letter even though the system will accept such symbols as selectors.  It is intended mostly for the assistance of spelling correction."	| firstChar numColons excess start ix |	self size = 0 ifTrue: [^ -1].	firstChar := self at: 1.	(firstChar isLetter or: [firstChar = $:]) ifTrue:		["Fast reject if any chars are non-alphanumeric		NOTE: fast only for Byte things - Broken for Wide"		Scanner prefAllowUnderscoreSelectors ifFalse:			[self class isBytes				ifTrue: [(self findSubstring: '~' in: self startingAt: 1 matchTable: Tokenish) > 0 ifTrue: [^ -1]]				ifFalse: [2 to: self size do: [:i | (self at: i) tokenish ifFalse: [^ -1]]]].		"Fast colon count"		numColons := 0.  start := 1.		[(ix := self indexOf: $: startingAt: start) > 0]			whileTrue:				[numColons := numColons + 1.				start := ix + 1].		numColons = 0 ifTrue: [^ 0].		firstChar = $:			ifTrue: [excess := 2 "Has an initial keyword, as #:if:then:else:"]			ifFalse: [excess := 0].		self last = $:			ifTrue: [^ numColons - excess]			ifFalse: [^ numColons - excess - 1 "Has a final keywords as #nextPut::andCR"]].	firstChar isSpecial ifTrue:		[self size = 1 ifTrue: [^ 1].		2 to: self size do: [:i | (self at: i) isSpecial ifFalse: [^ -1]].		^ 1].	^ -1.! !