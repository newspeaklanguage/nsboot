'From nsboot-2011-08-03 of 3 August 2011 [latest update: #10966] on 13 June 2012 at 9:41:58 pm'!!ChangeRecord methodsFor: 'access' stamp: 'eem 1/4/2012 16:26'!methodClass	| methodClassName methodClass |	(#(method #classComment) includes: type) ifFalse: [ ^ nil ].	methodClassName := class subStrings		ifEmpty: [ ^ nil ]		ifNotEmptyDo:			[ : parts | parts first asSymbol ].	methodClass := (Smalltalk globals includesKey: methodClassName)						ifTrue: [ Smalltalk at: methodClassName. ]						ifFalse: [MixinManager uniqueInstance definingClasses									detect: [:ea| ea name = class ]									ifNone: [ ^nil ] ].	^ meta		ifTrue: [ methodClass class ]		ifFalse: [ methodClass ]! !!SmalltalkImage methodsFor: 'snapshot and quit' stamp: 'yk 10/5/2011 17:38'!quitPrimitive: status	"Primitive. Exit to another operating system on the host machine, if one	exists. All state changes in the object space since the last snapshot are lost.	Essential. See Object documentation whatIsAPrimitive."	<primitive: 113>	self primitiveFailed! !!SmalltalkImage methodsFor: 'sources, changes log' stamp: 'yk 5/25/2012 14:55'!openSourceFiles	Preferences inPackagedImage ifTrue: [^self].	self imageName = LastImageName ifFalse:		["Reset the author initials to blank when the image gets moved"		LastImageName := self imageName.		"Prevent empty initials - causes a pop-up during debug that may		cause the UI to get stuck"		Utilities setAuthorInitials: 'Unknown'].	FileDirectory		openSources: self sourcesName		andChanges: self changesName		forImage: LastImageName.	SourceFileArray install! !!SystemNavigation methodsFor: 'browse' stamp: 'eem 11/4/2011 09:22'!browseAllStoresInto: varName from: aClass	"Create and schedule a Message Set browser for all the receiver's methods 	or any methods of a subclass/superclass that refer to the instance variable name."	"self new browseAllStoresInto: 'contents' from: Collection."	^ self		browseMessageList: (self allStoresInto: varName from: aClass)		name: 'Stores into ' , varName		autoSelect: varName! !!SystemNavigation methodsFor: 'browse' stamp: 'cmm 5/2/2011 09:55'!browseVariableAssignments: aClass 	aClass chooseVarThenDo:		[ : aVar | self			browseAllStoresInto: aVar			from: aClass ]! !!SystemNavigation methodsFor: 'browse' stamp: 'cmm 5/2/2011 09:43'!browseVariableReferences: aClass	aClass chooseVarThenDo:		[ : aVar | (aClass allInstVarNames includes: aVar)			ifTrue:				[ self					browseAllAccessesTo: aVar					from: aClass ]			ifFalse: [ self browseAllCallsOn: aVar ] ]! !!SystemNavigation methodsFor: 'query' stamp: 'eem 11/4/2011 09:20'!allAccessesTo: instVarName from: aClass	"Return a sequence of MethodReferences of all methods of aClass or it's sub/superclass that refer to the instance variable instVarName."		| result |	result := OrderedCollection new.	aClass withAllSubAndSuperclassesDo:		[ :class | 		(class whichSelectorsAccess: instVarName) do:			[ :selector |			result add: (MethodReference class: class selector: selector) ] ].	^result! !!SystemNavigation methodsFor: 'query' stamp: 'ul 3/13/2011 20:23'!allCallsOn: aLiteral fromBehaviors: behaviors sorted: sorted	"Answer a collection of all the methods implemented by behaviors that call on aLiteral even deeply embedded in literal array."		| result special thorough byte |	result := OrderedCollection new.	special := Smalltalk hasSpecialSelector: aLiteral ifTrueSetByte: [ :b | byte := b ].	"Possibly search for symbols imbedded in literal arrays"	thorough := aLiteral isSymbol and: [ Preferences thoroughSenders ].	behaviors do: [ :behavior |		| list | 		list := behavior whichSelectorsReferTo: aLiteral special: special byte: byte thorough: thorough.		list do: [ :selector |			result add: (MethodReference class: behavior selector: selector) ] ].	sorted ifTrue: [ result sort ].	^result! !!SystemNavigation methodsFor: 'query' stamp: 'ul 3/12/2011 14:53'!allSelectorsAndMethodsDo: aBlock 	"Evaluate aBlock for all selectors and methods of all behaviors in this image."		self allBehaviorsDo: [ :behavior |		behavior selectorsAndMethodsDo: [ :selector :method |			aBlock value: behavior value: selector value: method ] ]! !!SystemNavigation methodsFor: 'query' stamp: 'eem 11/4/2011 09:21'!allStoresInto: varName from: aClass 	"Answer a sequence of MewthodReferences for all the receiver's methods 	 or any methods of a subclass/superclass that assign to the instance variable name."	"self new allStoresInto: 'contents' from: Collection."	| result |	result := OrderedCollection new.	aClass withAllSubAndSuperclassesDo:		[ : class |		(class whichMethodsStoreInto: varName) do:			[ : eachMethod |			result add: eachMethod methodReference ] ].	^result! !