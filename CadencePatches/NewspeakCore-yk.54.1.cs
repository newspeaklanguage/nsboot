'From nsboot-2011-08-03 of 3 August 2011 [latest update: #10966] on 12 June 2012 at 9:33:58 pm'!!ImplementationBase methodsFor: 'as yet unclassified' stamp: 'yk 10/19/2011 09:39'!instVarsInclude: anObject"Answers true if anObject is among my named or indexed instance variables, and false otherwise"	<primitive: 132>	1 to: self class instSize do:		[:i | (self instVarAt: i) == anObject ifTrue: [^ true]].	1 to: self basicSize do:		[:i | (self basicAt: i) == anObject ifTrue: [^ true]].	^ false! !!NewspeakObject methodsFor: 'printing' stamp: 'eem 10/3/2011 08:45'!longPrintOn: aStream	"Append to the argument, aStream, the names and values of all 	of the receiver's instance variables."	self flag: 'reimplement with mirrors?'.	self class allInstVarNames doWithIndex:		[:title :index |		aStream nextPutAll: title;		 nextPut: $:;		 space;		 tab;		 print: (self instVarAt: index);		 cr]! !!NewspeakObject methodsFor: 'printing' stamp: 'eem 10/3/2011 08:46'!longPrintOn: aStream limitedTo: sizeLimit indent: indent	"Append to the argument, aStream, the names and values of all of the receiver's instance variables.  Limit is the length limit for each inst var."	self flag: 'reimplement with mirrors?'.	self class allInstVarNames doWithIndex:		[:title :index |		indent timesRepeat: [aStream tab].		aStream nextPutAll: title;		 nextPut: $:;		 space;		 tab;		 nextPutAll: 			((self instVarAt: index) printStringLimitedTo: (sizeLimit -3 -title size max: 1));		 cr]! !!NewspeakObject methodsFor: 'printing' stamp: 'tk 5/7/1999 16:20'!printStringLimitedTo: limit	"Answer a String whose characters are a description of the receiver.	If you want to print without a character limit, use fullPrintString."	| limitedString |	limitedString := String streamContents: [:s | self printOn: s] limitedTo: limit.	limitedString size < limit ifTrue: [^ limitedString].	^ limitedString , '...etc...'! !!NewspeakObject methodsFor: 'error handling' stamp: 'eem 10/3/2011 08:41'!doesNotUnderstand: msg "<Message>"	"Sent by the underlying system if an attempt was made to send a message to the receiver that it does not understand, that is, implement.	May be overriden in subclasses."	| sel exception resumptionValue mprop |	sel := msg selector.	(sel isUnary		and: [sel size > 2		and: [(sel at: 1) = $i		and: [(sel at: 2) = $s		and: [(sel at: 3) isUppercase]]]]) ifTrue: [ | m |		"sel looks like 'isP' where P is a protocol.		Add default implementation of sel returning false."		"The following construct the method: 'isP ^false'"		m := CompiledMethod newMethod: 4 header: 1282.			"objectAt: 1 is the header"		m objectAt: 2 put: ((Smalltalk includesKey: #AdditionalMethodState)			ifTrue: [sel]			ifFalse: [MethodProperties new selector: sel]).		m objectAt: 3 put: (Smalltalk associationAt: #NewspeakObject).		"The four bytes of the method are zero which means no source."		NewspeakObject addSelectorSilently: msg selector withMethod: m.		^msg sentTo: self].		(sel startsWith: 'initializer`') ifTrue: [ 		"Coerce NS3 name-managled instance initializer to un-managled NS2 couterpart so NS3 can subclass NS2."		msg setSelector: (sel allButFirst: 12) asSymbol.		^msg sentTo: self.	].		exception := (NewspeakError messageNotUnderstoood: msg receiver: self).	resumptionValue := exception signal.		^ exception reachedDefaultHandler		ifTrue: [ msg sentTo: self ]		ifFalse: [ resumptionValue ].! !!NewspeakObject methodsFor: 'error handling' stamp: 'GB 10/24/2009 18:35'!subclassResponsibility	self Error signal: 'My subclass should have overridden ', thisContext sender selector printString! !