'From nsboot-2011-08-03 of 3 August 2011 [latest update: #10966] on 7 August 2012 at 11:17:06 am'!!FileDirectory methodsFor: 'file name utilities' stamp: 'eem 1/27/2012 13:38'!relativeNameIfAbsoluteFor: aFileName	"Answer either the relative name for aFileName, if aFileName names a file in me or	 subdirectories, or aFileName's absolute path if it isn't in me or subdirectories.	 P.S. Ths is what I'd expect relativeNameFor: to do, but it is taken and means	 exactly the opposite, i.e. the absolute path for a relative name."	| fullNameSize fullName fileNameSize |	(aFileName isEmpty or: [aFileName first ~= self pathNameDelimiter]) ifTrue:		[self error: 'this method expects an absolute filename'].	fullNameSize := (fullName := self fullName) size.	fileNameSize := aFileName size.	^(aFileName beginsWith: fullName)		ifTrue: [(fileNameSize = fullNameSize				or: [fileNameSize - 1 = fullNameSize					and: [(aFileName at: fileNameSize) = self pathNameDelimiter]])					ifTrue: [self class currentDirectoryNickname]					ifFalse: [aFileName copyFrom: fullNameSize + 2 to: fileNameSize]]		ifFalse: [aFileName]	"SourceFiles asArray collect: [:sf| FileDirectory default relativeNameIfAbsoluteFor: sf fullName]"	"FileDirectory default relativeNameIfAbsoluteFor: FileDirectory default fullName" "should be dot"	"FileDirectory default relativeNameIfAbsoluteFor: FileDirectory default fullName, FileDirectory default slash" "should also be dot"! !!FileDirectory methodsFor: 'testing' stamp: 'eem 12/15/2011 15:08'!directoryExists: filenameOrPath	"Answer true if a directory of the given name exists. The given name may be either a full path name or a local directory within this directory."	"FileDirectory default directoryExists: FileDirectory default pathName"	| fName dir |	DirectoryClass		splitName: filenameOrPath		to: [:filePath :name |			fName := name.			dir := filePath isEmpty					ifTrue: [self]					ifFalse: [self directoryNamed: filePath]].	^dir exists	  and: [self class currentDirectoryNickname = fName		   or: [self class parentDirectoryNickname = fName		   or: [self isCaseSensitive 				ifTrue:[dir directoryNames includes: fName]				ifFalse:[dir directoryNames anySatisfy: [:name| name sameAs: fName]]]]]! !!FileDirectory class methodsFor: 'platform specific' stamp: 'eem 12/15/2011 14:56'!currentDirectoryNickname	"Answer the nick-name for the current directory (e.g. '.' on Unix and Windows).	 Answer the common default."	^'.'! !!FileDirectory class methodsFor: 'platform specific' stamp: 'eem 12/15/2011 15:06'!parentDirectoryNickname	"Answer the nick-name for the parent directory (e.g. '..' on Unix and Windows).	 Answer the common default."	^'..'! !!AcornFileDirectory class methodsFor: 'platform specific' stamp: 'eem 12/15/2011 15:07'!currentDirectoryNickname	"Answer the nick-name for the current directory (e.g. '.' on Unix and Windows).	 Who knows what this is on Acorn?"	^nil! !!AcornFileDirectory class methodsFor: 'platform specific' stamp: 'eem 12/15/2011 15:07'!parentDirectoryNickname	"Answer the nick-name for the parent directory (e.g. '..' on Unix and Windows).	 Who knows what this is on Acorn?"	^nil! !